{"version":3,"sources":["components/CircularIndeterminate/CircularIndeterminate.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","theme","progress","margin","spacing","unit","props","classes","react_default","a","createElement","CircularProgress_default","className","size","style","color","purple","thickness","PLACES","name","WeatherDisplay","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","weatherData","_this2","fetch","then","res","json","setState","CircularIndeterminate_CircularIndeterminate","weather","Toolbar_default","Typography_default","variant","main","Divider_default","Table_default","TableBody_default","TableRow_default","TableCell_default","parseInt","temp","temp_max","temp_min","wind","speed","Component","App","_this3","activePlace","_this4","map","place","index","Button_default","key","onClick","App_WeatherDisplay","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ee28a700.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport purple from '@material-ui/core/colors/purple';\n\nconst styles = theme => ({\n  progress: {\n    margin: theme.spacing.unit * 2,\n  },\n});\n\nfunction CircularIndeterminate(props) {\n  const { classes } = props;\n  return (\n    <div>\n      <CircularProgress className={classes.progress} size={50} style={{ color: purple[500] }} thickness={7} />\n    </div>\n  );\n}\n\nCircularIndeterminate.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(CircularIndeterminate);","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport TableCell from '@material-ui/core/TableCell';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport CircularIndeterminate from './components/CircularIndeterminate/CircularIndeterminate'\n// import SearchInput from './components/SearchInput/SearchInput'\n\nimport './App.scss';\n//https://material-ui.com/api/button/\nconst PLACES = [\n  { name: 'Moscow' },\n  { name: 'Gus-Khrustalny' },\n  { name: 'London' },\n  { name: 'New York' },\n  { name: 'Berlin' },\n  { name: 'San Jose' },\n  // { name: 'Palo Alto', zip: '94303' },\n  // { name: 'San Jose', zip: '94088' },\n  // { name: 'Santa Cruz', zip: '95062' },\n  // { name: 'Honolulu', zip: '96803' },\n];\n\nclass WeatherDisplay extends Component {\n  constructor () {\n    super();\n    this.state = {\n      weatherData: null,\n    };\n  }\n\n  componentDidMount () {\n    //   const zip = this.props.zip;\n    const name = this.props.name;\n    const URL =\n      'https://api.openweathermap.org/data/2.5/weather?q=' +\n      name +\n      '&appid=b1b35bba8b434a28a0be2a3e1071ae5b&units=imperial';\n    fetch(URL).then((res) => res.json()).then((json) => {\n      this.setState({ weatherData: json });\n    });\n  }\n  render () {\n    const weatherData = this.state.weatherData;\n    if (!weatherData) return <CircularIndeterminate/>;\n    // if (!weatherData) return <div>Loading</div>;\n    const weather = weatherData.weather[0];\n    return (\n      <div>\n        {/* <SearchInput/> */}\n        <Toolbar>\n          <Typography variant='h6' className='header'>\n            {weather.main} in {weatherData.name}\n          </Typography>\n        </Toolbar>\n        <Divider />\n\n        <Table>\n          <TableBody>\n            <TableRow>\n              <TableCell>\n                <p>Current:</p>\n              </TableCell>\n              <TableCell>\n                <p>{parseInt((weatherData.main.temp - 32) * 5 / 9, 10)}°</p>\n              </TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>\n                <p>High:</p>\n              </TableCell>\n              <TableCell>\n                <p>{parseInt((weatherData.main.temp_max - 32) * 5 / 9, 10)}°</p>\n              </TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>\n                <p>Low:</p>\n              </TableCell>\n              <TableCell>\n                <p>{parseInt((weatherData.main.temp_min - 32) * 5 / 9, 10)}°</p>\n              </TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>\n                <p>Wind Speed:</p>\n              </TableCell>\n              <TableCell>\n                <p>{weatherData.wind.speed} mi/hr</p>\n              </TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      </div>\n    );\n  }\n}\n\nclass App extends Component {\n  constructor () {\n    super();\n    this.state = {\n      activePlace: 0,\n    };\n  }\n  render () {\n    const activePlace = this.state.activePlace;\n    return (\n      <div className='App'>\n        <div className='Button-Container'>\n          {PLACES.map((place, index) => (\n            <Button\n              size={'medium'}\n              variant={'text'}\n              key={index}\n              onClick={() => {\n                this.setState({ activePlace: index });\n              }}\n            >\n              {place.name}\n            </Button>\n          ))}\n        </div>\n        <WeatherDisplay\n          key={activePlace}\n          name={PLACES[activePlace].name} /* zip={PLACES[activePlace].zip} */\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}