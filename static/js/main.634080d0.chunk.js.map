{"version":3,"sources":["components/CircularIndeterminate/CircularIndeterminate.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","theme","progress","margin","spacing","unit","props","classes","react_default","a","createElement","CircularProgress_default","className","size","style","color","purple","thickness","PLACES","name","WeatherDisplay","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","weatherData","_this2","fetch","then","res","json","setState","CircularIndeterminate_CircularIndeterminate","weather","Toolbar_default","Typography_default","variant","main","Divider_default","Table_default","TableBody_default","TableRow_default","TableCell_default","parseInt","temp","temp_max","temp_min","wind","speed","Component","App","_this3","activePlace","_this4","map","place","index","Button_default","key","onClick","App_WeatherDisplay","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8XAyBeA,2BAnBA,SAAAC,GAAK,MAAK,CACvBC,SAAU,CACRC,OAA6B,EAArBF,EAAMG,QAAQC,QAiBXL,CAbf,SAA+BM,GAAO,IAC5BC,EAAYD,EAAZC,QACR,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAkBG,UAAWL,EAAQL,SAAUW,KAAM,GAAIC,MAAO,CAAEC,MAAOC,IAAO,MAAQC,UAAW,OCFnGC,UAAS,CACb,CAAEC,KAAM,UACR,CAAEA,KAAM,UACR,CAAEA,KAAM,YACR,CAAEA,KAAM,UACR,CAAEA,KAAM,YACR,CAAEA,KAAM,UACR,CAAEA,KAAM,YACR,CAAEA,KAAM,kBACR,CAAEA,KAAM,UACR,CAAEA,KAAM,QACR,CAAEA,KAAM,aACR,CAAEA,KAAM,gBACR,CAAEA,KAAM,SACR,CAAEA,KAAM,eAMJC,cACJ,SAAAA,IAAe,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACbC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,YAAa,MAHFR,mFAOM,IAAAS,EAAAN,KAEbL,EAAOK,KAAKlB,MAAMa,KAKxBY,MAHE,qDACAZ,EACA,0DACSa,KAAK,SAACC,GAAD,OAASA,EAAIC,SAAQF,KAAK,SAACE,GACzCJ,EAAKK,SAAS,CAAEN,YAAaK,uCAI/B,IAAML,EAAcL,KAAKI,MAAMC,YAC/B,IAAKA,EAAa,OAAOrB,EAAAC,EAAAC,cAAC0B,EAAD,MAEzB,IAAMC,EAAUR,EAAYQ,QAAQ,GACpC,OACE7B,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAAC4B,EAAA7B,EAAD,KACED,EAAAC,EAAAC,cAAC6B,EAAA9B,EAAD,CAAY+B,QAAQ,KAAK5B,UAAU,UAChCyB,EAAQI,KADX,OACqBZ,EAAYV,OAGnCX,EAAAC,EAAAC,cAACgC,EAAAjC,EAAD,MAEAD,EAAAC,EAAAC,cAACiC,EAAAlC,EAAD,KACED,EAAAC,EAAAC,cAACkC,EAAAnC,EAAD,KACED,EAAAC,EAAAC,cAACmC,EAAApC,EAAD,KACED,EAAAC,EAAAC,cAACoC,EAAArC,EAAD,KACED,EAAAC,EAAAC,cAAA,sBAEFF,EAAAC,EAAAC,cAACoC,EAAArC,EAAD,KACED,EAAAC,EAAAC,cAAA,SAAIqC,SAAwC,GAA9BlB,EAAYY,KAAKO,KAAO,IAAU,EAAG,IAAnD,UAGJxC,EAAAC,EAAAC,cAACmC,EAAApC,EAAD,KACED,EAAAC,EAAAC,cAACoC,EAAArC,EAAD,KACED,EAAAC,EAAAC,cAAA,mBAEFF,EAAAC,EAAAC,cAACoC,EAAArC,EAAD,KACED,EAAAC,EAAAC,cAAA,SAAIqC,SAA4C,GAAlClB,EAAYY,KAAKQ,SAAW,IAAU,EAAG,IAAvD,UAGJzC,EAAAC,EAAAC,cAACmC,EAAApC,EAAD,KACED,EAAAC,EAAAC,cAACoC,EAAArC,EAAD,KACED,EAAAC,EAAAC,cAAA,kBAEFF,EAAAC,EAAAC,cAACoC,EAAArC,EAAD,KACED,EAAAC,EAAAC,cAAA,SAAIqC,SAA4C,GAAlClB,EAAYY,KAAKS,SAAW,IAAU,EAAG,IAAvD,UAGJ1C,EAAAC,EAAAC,cAACmC,EAAApC,EAAD,KACED,EAAAC,EAAAC,cAACoC,EAAArC,EAAD,KACED,EAAAC,EAAAC,cAAA,yBAEFF,EAAAC,EAAAC,cAACoC,EAAArC,EAAD,KACED,EAAAC,EAAAC,cAAA,SAAImB,EAAYsB,KAAKC,MAArB,sBAjEaC,aA6GdC,cAjCb,SAAAA,IAAe,IAAAC,EAAA,OAAAjC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8B,IACbC,EAAAjC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgC,GAAA3B,KAAAH,QACKI,MAAQ,CACX4B,YAAa,GAHFD,wEAML,IAAAE,EAAAjC,KACFgC,EAAchC,KAAKI,MAAM4B,YAC/B,OACEhD,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oBACZM,EAAOwC,IAAI,SAACC,EAAOC,GAAR,OACVpD,EAAAC,EAAAC,cAACmD,EAAApD,EAAD,CACEI,KAAM,SACN2B,QAAS,OACTsB,IAAKF,EACLG,QAAS,WACPN,EAAKtB,SAAS,CAAEqB,YAAaI,MAG9BD,EAAMxC,SAIbX,EAAAC,EAAAC,cAACsD,EAAD,CACEF,IAAKN,EACLrC,KAAMD,EAAOsC,GAAarC,eA3BlBkC,aCjGEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,KAAK,SAAA8C,GACjCA,EAAaC","file":"static/js/main.634080d0.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport purple from '@material-ui/core/colors/purple';\r\n\r\nconst styles = theme => ({\r\n  progress: {\r\n    margin: theme.spacing.unit * 2,\r\n  },\r\n});\r\n\r\nfunction CircularIndeterminate(props) {\r\n  const { classes } = props;\r\n  return (\r\n    <div>\r\n      <CircularProgress className={classes.progress} size={50} style={{ color: purple[500] }} thickness={7} />\r\n    </div>\r\n  );\r\n}\r\n\r\nCircularIndeterminate.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(CircularIndeterminate);","import React, { Component } from 'react';\r\nimport Table from '@material-ui/core/Table';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport Button from '@material-ui/core/Button';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport CircularIndeterminate from './components/CircularIndeterminate/CircularIndeterminate'\r\n// import SearchInput from './components/SearchInput/SearchInput'\r\n\r\nimport './App.scss';\r\n//https://material-ui.com/api/button/\r\nconst PLACES = [\r\n  { name: 'Moscow' },\r\n  { name: 'Khimki' },\r\n  { name: 'Taganrog' },\r\n  { name: 'London' },\r\n  { name: 'New York' },\r\n  { name: 'Berlin' },\r\n  { name: 'San Jose' },\r\n  { name: 'Gus-Khrustalny' },\r\n  { name: 'Bratsk' },\r\n  { name: 'Kiev' },\r\n  { name: 'Sukhothai' },\r\n  { name: 'Kuala Lumpur' },\r\n  { name: 'Genoa' },\r\n  { name: 'Palo Alto'},\r\n  // { name: 'San Jose', zip: '94088' },\r\n  // { name: 'Santa Cruz', zip: '95062' },\r\n  // { name: 'Honolulu', zip: '96803' },\r\n];\r\n\r\nclass WeatherDisplay extends Component {\r\n  constructor () {\r\n    super();\r\n    this.state = {\r\n      weatherData: null,\r\n    };\r\n  }\r\n\r\n  componentDidMount () {\r\n    //   const zip = this.props.zip;\r\n    const name = this.props.name;\r\n    const URL =\r\n      'https://api.openweathermap.org/data/2.5/weather?q=' +\r\n      name +\r\n      '&appid=b1b35bba8b434a28a0be2a3e1071ae5b&units=imperial';\r\n    fetch(URL).then((res) => res.json()).then((json) => {\r\n      this.setState({ weatherData: json });\r\n    });\r\n  }\r\n  render () {\r\n    const weatherData = this.state.weatherData;\r\n    if (!weatherData) return <CircularIndeterminate/>;\r\n    // if (!weatherData) return <div>Loading</div>;\r\n    const weather = weatherData.weather[0];\r\n    return (\r\n      <div>\r\n        {/* <SearchInput/> */}\r\n        <Toolbar>\r\n          <Typography variant='h6' className='header'>\r\n            {weather.main} in {weatherData.name}\r\n          </Typography>\r\n        </Toolbar>\r\n        <Divider />\r\n\r\n        <Table>\r\n          <TableBody>\r\n            <TableRow>\r\n              <TableCell>\r\n                <p>Current:</p>\r\n              </TableCell>\r\n              <TableCell>\r\n                <p>{parseInt((weatherData.main.temp - 32) * 5 / 9, 10)}°</p>\r\n              </TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n              <TableCell>\r\n                <p>High:</p>\r\n              </TableCell>\r\n              <TableCell>\r\n                <p>{parseInt((weatherData.main.temp_max - 32) * 5 / 9, 10)}°</p>\r\n              </TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n              <TableCell>\r\n                <p>Low:</p>\r\n              </TableCell>\r\n              <TableCell>\r\n                <p>{parseInt((weatherData.main.temp_min - 32) * 5 / 9, 10)}°</p>\r\n              </TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n              <TableCell>\r\n                <p>Wind Speed:</p>\r\n              </TableCell>\r\n              <TableCell>\r\n                <p>{weatherData.wind.speed} mi/hr</p>\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableBody>\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  constructor () {\r\n    super();\r\n    this.state = {\r\n      activePlace: 0,\r\n    };\r\n  }\r\n  render () {\r\n    const activePlace = this.state.activePlace;\r\n    return (\r\n      <div className='App'>\r\n        <div className='Button-Container'>\r\n          {PLACES.map((place, index) => (\r\n            <Button\r\n              size={'medium'}\r\n              variant={'text'}\r\n              key={index}\r\n              onClick={() => {\r\n                this.setState({ activePlace: index });\r\n              }}\r\n            >\r\n              {place.name}\r\n            </Button>\r\n          ))}\r\n        </div>\r\n        <WeatherDisplay\r\n          key={activePlace}\r\n          name={PLACES[activePlace].name} /* zip={PLACES[activePlace].zip} */\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}